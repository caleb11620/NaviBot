#include <MPU6050_light.h>


MPU6050 mpu(Wire);
unsigned long timer = 0;
int target = 0; //tracking angles for turning
//int value; //turn the gyro to just interger


void setup() {
  Serial.begin(9600);           // set up Serial library at 9600 bps

  Wire.begin();
  byte status = mpu.begin();
  Serial.print(F("MPU6050 status: "));
  Serial.println(status);
  while(status!=0){ } // stop everything if could not connect to MPU6050
  Serial.println(F("Calculating offsets, do not move MPU6050"));
  delay(5000);
  mpu.calcOffsets(); // gyro and accelero
  Serial.println("Done!\n");
   
}

void loop() {
  
  getAngles();

  L_angle(90);
  Serial.println(mpu.getAngleZ());
  R_angle(90);
  
 
}

void getAngles(){

  mpu.update();
  if((millis()-timer)>500){ // print data every 500ms
	Serial.println(mpu.getAngleZ());
	timer = millis();  
  }
}

void L_angle(int target){


  Serial.println(mpu.getAngleZ());
  Serial.println("moving LEFT");
  //motor code

  if (mpu.getAngleZ() >= target){
    Serial.print("stop");
    //stop motor
  }
  
   mpu.update(); 
}

void R_angle(int target){
    Serial.println(mpu.getAngleZ());
    Serial.println("moving left");
    //motor code
  
  if (mpu.getAngleZ() <= target){
      Serial.print("stop");
      leftMotor->run(RELEASE); //stops the Motors
      rightMotor->run(RELEASE);
      leftMotor->fullOff();
      rightMotor->fullOff();
    }
 
  mpu.update(); 
}

void drivestraight(int target){
  
  if (mpu.getAngleZ() >= target){
    leftMotor->run(RELEASE);
    rightMotor->run(RELEASE);
    leftMotor->setSpeed(70);
    rightMotor->setSpeed(70);
  }
  
    mpu.update();
}

